@model IEnumerable<FeedHope.Models.ColetaModel>

@{
    ViewData["Title"] = "Mapa de Coletas";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title mb-0">
                        <i class="fas fa-map-marked-alt text-primary me-2"></i>
                        Mapa de Coletas
                    </h3>
                    <div>
                        <a href="@Url.Action("Logistica")" class="btn btn-outline-primary">
                            <i class="fas fa-list me-1"></i>Ver Lista
                        </a>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div id="map" style="height: 600px; width: 100%;"></div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Painel lateral com informações das coletas -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-list-ul me-2"></i>
                        Coletas no Mapa
                    </h5>
                </div>
                <div class="card-body">
                    @if (!Model.Any())
                    {
                        <div class="text-center py-3">
                            <i class="fas fa-map-marker-alt text-muted" style="font-size: 3rem;"></i>
                            <h5 class="mt-3 text-muted">Nenhuma coleta com coordenadas</h5>
                            <p class="text-muted">As coletas precisam ter latitude e longitude definidas para aparecer no mapa.</p>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            @foreach (var coleta in Model)
                            {
                                <div class="col-md-6 col-lg-4 mb-3">
                                    <div class="card border-left-@(coleta.Status == "Aprovada" ? "primary" : "success") h-100">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                <h6 class="card-title mb-0">@coleta.Empresa?.Nome</h6>
                                                <span class="badge badge-@(coleta.Status == "Aprovada" ? "primary" : "success")">
                                                    @coleta.Status
                                                </span>
                                            </div>
                                            
                                            <p class="card-text small text-muted mb-2">
                                                <i class="fas fa-map-marker-alt me-1"></i>
                                                @coleta.Endereco
                                            </p>
                                            
                                            <p class="card-text small mb-2">
                                                <i class="fas fa-calendar me-1"></i>
                                                @coleta.DataColeta.ToString("dd/MM/yyyy HH:mm")
                                            </p>
                                            
                                            @if (coleta.OrdemColeta.HasValue)
                                            {
                                                <p class="card-text small mb-2">
                                                    <i class="fas fa-sort-numeric-up me-1"></i>
                                                    Ordem: @coleta.OrdemColeta
                                                </p>
                                            }
                                            
                                            <div class="mt-2">
                                                <button type="button" class="btn btn-outline-primary btn-sm" 
                                                        onclick="focusOnMarker(@coleta.Latitude, @coleta.Longitude)">
                                                    <i class="fas fa-crosshairs me-1"></i>Localizar
                                                </button>
                                                <a href="@Url.Action("Details", new { id = coleta.Id })" 
                                                   class="btn btn-outline-secondary btn-sm">
                                                    <i class="fas fa-eye me-1"></i>Detalhes
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    
    <script>
        let map;
        let markers = [];
        
        document.addEventListener('DOMContentLoaded', function() {
            initializeMap();
        });
        
        function initializeMap() {
            // Coordenadas de Belém, PA (centro padrão)
            const defaultLat = -1.4558;
            const defaultLng = -48.4902;
            
            // Inicializar o mapa
            map = L.map('map').setView([defaultLat, defaultLng], 12);
            
            // Adicionar camada do OpenStreetMap
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);
            
            // Dados das coletas
            const coletas = @Html.Raw(Json.Serialize(Model.Select(c => new {
                Id = c.Id,
                EmpresaNome = c.Empresa?.Nome,
                Endereco = c.Endereco,
                Latitude = c.Latitude,
                Longitude = c.Longitude,
                Status = c.Status,
                DataColeta = c.DataColeta.ToString("dd/MM/yyyy HH:mm"),
                OrdemColeta = c.OrdemColeta,
                ResponsavelUFRA = c.ResponsavelUFRA
            })));
            
            if (coletas.length > 0) {
                addMarkersToMap(coletas);
                fitMapToMarkers();
            }
        }
        
        function addMarkersToMap(coletas) {
            coletas.forEach(function(coleta, index) {
                if (coleta.Latitude && coleta.Longitude) {
                    // Definir cor do marcador baseado no status
                    const iconColor = coleta.Status === 'Aprovada' ? 'blue' : 'green';
                    
                    // Criar ícone personalizado
                    const customIcon = L.divIcon({
                        className: 'custom-marker',
                        html: `<div class="marker-pin marker-${iconColor}">
                                   <div class="marker-number">${coleta.OrdemColeta || index + 1}</div>
                               </div>`,
                        iconSize: [30, 42],
                        iconAnchor: [15, 42],
                        popupAnchor: [0, -42]
                    });
                    
                    // Criar marcador
                    const marker = L.marker([coleta.Latitude, coleta.Longitude], {
                        icon: customIcon
                    }).addTo(map);
                    
                    // Criar popup
                    const popupContent = `
                        <div class="marker-popup">
                            <h6 class="mb-2">${coleta.EmpresaNome}</h6>
                            <p class="mb-1 small"><strong>Endereço:</strong> ${coleta.Endereco}</p>
                            <p class="mb-1 small"><strong>Status:</strong> 
                                <span class="badge badge-${coleta.Status === 'Aprovada' ? 'primary' : 'success'}">${coleta.Status}</span>
                            </p>
                            ${coleta.DataColeta ? `<p class="mb-1 small"><strong>Data:</strong> ${coleta.DataColeta}</p>` : ''}
                            ${coleta.ResponsavelUFRA ? `<p class="mb-1 small"><strong>Responsável:</strong> ${coleta.ResponsavelUFRA}</p>` : ''}
                            <div class="mt-2">
                                <a href="/Coleta/Details/${coleta.Id}" class="btn btn-primary btn-sm">
                                    <i class="fas fa-eye me-1"></i>Ver Detalhes
                                </a>
                            </div>
                        </div>
                    `;
                    
                    marker.bindPopup(popupContent);
                    markers.push(marker);
                }
            });
        }
        
        function fitMapToMarkers() {
            if (markers.length > 0) {
                const group = new L.featureGroup(markers);
                map.fitBounds(group.getBounds().pad(0.1));
            }
        }
        
        function focusOnMarker(lat, lng) {
            map.setView([lat, lng], 16);
            
            // Encontrar e abrir o popup do marcador
            markers.forEach(function(marker) {
                const markerLatLng = marker.getLatLng();
                if (Math.abs(markerLatLng.lat - lat) < 0.0001 && Math.abs(markerLatLng.lng - lng) < 0.0001) {
                    marker.openPopup();
                }
            });
        }
    </script>
    
    <style>
        .custom-marker {
            background: transparent;
            border: none;
        }
        
        .marker-pin {
            width: 30px;
            height: 30px;
            border-radius: 50% 50% 50% 0;
            position: relative;
            transform: rotate(-45deg);
            left: 50%;
            top: 50%;
            margin: -15px 0 0 -15px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .marker-pin.marker-blue {
            background: #007bff;
            border: 2px solid #0056b3;
        }
        
        .marker-pin.marker-green {
            background: #28a745;
            border: 2px solid #1e7e34;
        }
        
        .marker-number {
            color: white;
            font-weight: bold;
            font-size: 12px;
            transform: rotate(45deg);
        }
        
        .marker-popup {
            min-width: 200px;
        }
        
        .border-left-primary {
            border-left: 4px solid #007bff !important;
        }
        
        .border-left-success {
            border-left: 4px solid #28a745 !important;
        }
        
        .leaflet-popup-content-wrapper {
            border-radius: 8px;
        }
    </style>
}

